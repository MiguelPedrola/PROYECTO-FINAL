
```{r}
library(funModeling)
library(tidyverse)
library(ggplot2)
library(plotly)
library(leaflet)
library(lubridate)
library(gganimate)
library(sf)
library(xts)
library(dygraphs)
library(highcharter)
```





Establecemos directorio y descargamos los dataset requeridos
```{r}
#Fuente de los dataset
#https://data.buenosaires.gob.ar/dataset/delitos
#https://data.buenosaires.gob.ar/dataset/barrios
#https://data.buenosaires.gob.ar/dataset/comisarias-policia-ciudad
#https://data.buenosaires.gob.ar/dataset/seguridad-habitos
#https://data.buenosaires.gob.ar/dataset/camaras-fijas-control-vehicular


setwd("C:/Users/USUARIO/EANT/Practicando R/")
Delitos_2020<-read_csv("C:/Users/USUARIO/EANT/Practicando R/delitos_2020.csv")
Delitos_2019<-read_csv("C:/Users/USUARIO/EANT/Practicando R/delitos_2019.csv")
Delitos_2018<-read_csv("C:/Users/USUARIO/EANT/Practicando R/delitos_2018.csv")
Delitos_2017<-read_csv("C:/Users/USUARIO/EANT/Practicando R/delitos_2017.csv")
Delitos_2016<-read_csv("C:/Users/USUARIO/EANT/Practicando R/delitos_2016.csv")
Comisarias_Caba<-read_csv("C:/Users/USUARIO/EANT/Practicando R/comisarias-policia-de-la-ciudad.csv")
comunas_caba <- st_read('https://bitsandbricks.github.io/data/CABA_comunas.geojson')
rivadavia_avenida <- st_read('https://bitsandbricks.github.io/data/avenida_rivadavia.geojson')

```

Comenzamos por hacer un analisis exploratorio de los datos.
En primer lugar comenzamos analizando la cantida de delitos en relacion a los meses
```{r}
#Como no poseemos la variable mes por separado, sino que se encuentra ensamblada junto con los años y los dias en la variable fecha, procedi a crear una variable nueva que solo contenga los meses. Esta operacion la realizare con una funcion de lubridate, la cual es dataset$variable nueva<-month(dataset$variable en que se encuentran los meses).

Delitos_2016$mes<-month(Delitos_2016$fecha)

#Una vez creada la nueva variable mes, voy a proceder a cada mes asignarle el nombre que le corresponde.

Delitos_2016<-Delitos_2016%>%mutate(mes=case_when(mes==1~"Enero", mes==2~"Febrero", mes==3~"Marzo", mes==4~"Abril", mes==5~"Mayo", mes==6~"Junio", mes==7~"Julio", mes==8~"Agosto", mes==9~"Septiembre", mes==10~"Octubre", mes==11~"Noviembre", mes==12~"Diciembre"))

#Ahora procedemos a hacer el analisis exploratorio con respecto a la cantidad de delitos ocurridos por mes

freq(Delitos_2016$mes)
ggplot(data = Delitos_2016)+
  geom_bar(mapping = aes(x=mes, fill=mes))+
  theme(legend.position = "none")+
  coord_flip()
```


Aquí vamos a analizar la cantidad de delitos por franja horaria
```{r}
freq(Delitos_2016$franja_horaria)

#Como con la funcion freq vimos que hay valores perdidos en la variable franja, por lo tanto, al ver que son muy pocos los valores perdidos, voy a proceder a eliminar los valores perdidos del dataset delitos_2016. Al eliminar los valores perdidos que hay en la columna franja_horarios, se nos eliminan todas las filas en las cuales en la columna franja_horaria hay valores nulos o perdidos. La funcion para hacer esto es la siguiente datos <- datos[!is.na(datos$variable),]

Delitos_2016 <- Delitos_2016[!is.na(Delitos_2016$franja_horaria),]
freq(Delitos_2016$franja_horaria)
```


Aqui vamos a analizar la cantidad de delitos segun el tipo de delito
```{r}
freq(Delitos_2016$tipo_delito)
ggplot(data = Delitos_2016)+
  geom_bar(mapping = aes(x=tipo_delito, fill=tipo_delito))+
  theme(legend.position = "none")+
  coord_flip()
  
```


Aquí vamos a ver la cantidad de delitos segun el subtipo
```{r}
freq(Delitos_2016$subtipo_delito)

#Nuevamente nos encontramos con valores perdidos, pero como esta vez son demasiados, y de pisar mi dataset original me quedaria con muy pocos obersvaciones, voy a crear un nuevo dataset donde no hayan valores perdidos en la variable subtipo

Delitos_2016_subtipos <- Delitos_2016[!is.na(Delitos_2016$subtipo_delito),]

ggplot(data = Delitos_2016_subtipos)+
  geom_bar(mapping = aes(x=subtipo_delito, fill=subtipo_delito))+
  theme(legend.position = "none")+
  coord_flip()
```


Aqui vamos a analizar la cantidad de delitos ocurridos por barrio
```{r}
freq(Delitos_2016$barrio)
```


Aqui vamos a analizar la cantidad de delitos por comuna
```{r}
freq(Delitos_2016$comuna)

#Como vemos que aquí tambien hay valores nulos, voy a crear un nuevo dataset donde eliminare los valores nulos de la columna comuna
Delitos_2016_comuna <- Delitos_2016[!is.na(Delitos_2016$comuna),]

```


Aquí vamos a proceder a analizar la variabilidad en el tiempo, durante el año 2016, de los delitos ocurridos.
```{r}
#Para realizar lo propuesto arriba del chunk, debo crear un nuevo dataset que cuente la cantidad de delitos (la frecuencia) que ocurrieron por fecha, independientemente de cualquier otra variable, sea el tipo de delito, el sub tipo u otro. Para ello, utilizare la funcion gruop_by y summarise, con la cuales lo que hare sera agrupar todas las observaciones por la fecha de ocurrencia, asígnandole al conteo de ocurrencia/frecuencia de las obersvaciones (delitos), el nombre delitos.

Delitos_2016_por_fecha<-Delitos_2016%>%group_by(fecha)%>%summarise(delitos=n())

#Una vez crado el dataset en donde agrupe toda la cantida de delitos segun su fecha de ocurrencia, procedo a graficarlos para ver su variabilidad durante el año 2016

grafico_delitos2016_por_fecha<-ggplot(data = Delitos_2016_por_fecha, mapping = aes(x=fecha, y=delitos))+
  geom_area(fill="navy", alpha=0.5)+
  geom_line(colour="light blue")+
  geom_point()+
  theme_bw()

ggplotly(grafico_delitos2016_por_fecha)
```



Aquí vamos a analizar la cantidad de delitos cometidos por franja horaria. Para ello tendremos que crear una variable que contenga, en funcion del momento del dia, las horas correspondientes
```{r}
#En un primer momento, realizo esta funcion de reenombrar cada uno de las observaciones debido a que, de no hacerlo, al momento de agrupar las observaciones bajo las categorias mañana-tarde-noche-madrugada, la funcion case_when no me toma las observaciones que se corresponden con el valor 0 en la variable franja_horaria. Por ello, tuve que renombrar a la observacion 0 hs por la variable 24 hs.
Delitos_2016<-Delitos_2016%>%mutate(franja_horaria=case_when(franja_horaria==1~1, franja_horaria==2~2, franja_horaria==3~3, franja_horaria==4~4, franja_horaria==5~5, franja_horaria==6~6, franja_horaria==7~7, franja_horaria==8~8, franja_horaria==9~9, franja_horaria==10~10, franja_horaria==11~11, franja_horaria==12~12, franja_horaria==13~13, franja_horaria==14~14, franja_horaria==15~15, franja_horaria==16~16, franja_horaria==17~17, franja_horaria==18~18, franja_horaria==19~19, franja_horaria==20~20, franja_horaria==21~21, franja_horaria==22~22, franja_horaria==23~23, franja_horaria==0~24))



#Luego de hacer lo especificado arriba, aquí lo que hago es agrupar por intervalos para luego, a dicho intervalo, asígnarle una categoria correspondiente al momento del dia al que corresponden dichos intervalos
Delitos_2016<-Delitos_2016%>%mutate(momento_del_dia=case_when(franja_horaria>=7 & franja_horaria <=12 ~"Mañana", franja_horaria>=13 & franja_horaria <=19 ~"Tarde", franja_horaria >= 20 & franja_horaria <=24 ~"Noche", franja_horaria >=1 & franja_horaria <=6 ~"Madrugada"))

#Aqui grafico la cantidad de delitos ocurridos por el momento del dia
ggplot(data = Delitos_2016)+
  geom_bar(mapping = aes(x=momento_del_dia, fill=momento_del_dia))

#Aquí grafico la cantidad de delitos ocurridos en el momento del dia, y el tipo de delitos ocurridos en cada momento del dia
grafico_delitos_por_momento_del_dia_y_tipodelito<-ggplot(data = Delitos_2016)+
  geom_bar(mapping = aes(x=momento_del_dia, fill=tipo_delito))
 
grafico_delitos_por_momento_del_dia_y_tipodelito
```


Aqui lo que voy a hacer es construir un mapa del delito, graficando por cada tipo de delito un mapa, y en donde cada punto representa el lugar exacto en donde ocurrio dicho hecho. Cada punto esta contruido a partir de los datos de longitug y latitud.
```{r}
#Para relizar lo expuesto mas arriba, en un primer momento creare un nuevo dataset, a partir del ensamble del dataset donde se encuentran registrados los delitos junto con sus medidas de longitud y latitud, con el dataset de comunas, donde se encuentran las medidas geometricas para graficar el mapa de CABA. Por otro lado, con la funcion que realizare a continuacion, tambien eliminare vales perdidos.

Delitos_2016 %>% 
  na.exclude() %>% 
  st_as_sf(coords = c("long","lat"), remove = FALSE,  crs = 4326) %>% 
  st_join(comunas_caba)-> delitos_puntos_2016


#Luego aqui pasare a graficar el mapa del delito en caba, en funcion de los distintos tipos de delito.


ggplot(delitos_puntos_2016) +
  geom_sf(data = comunas_caba, fill = "white") +
  geom_sf(data = delitos_puntos_2016, aes(color=tipo_delito, alpha = 1), size=1) +
  theme_gray()+
  labs(title = paste("CABA - Mapa del delito"), 
       subtitle = paste0("Delitos por tipo en la Ciudad de Buenos Aires - Año 2016\n") , 
       caption = "Fuente: data.buenosaires.gob.ar", 
       y = "", 
       x = ""
  ) +
  theme (axis.text.x=element_blank(),
        axis.ticks.x=element_blank(),
        axis.title.y=element_blank(),
        axis.text.y=element_blank(),
        axis.ticks.y=element_blank(),
        legend.position = "none") +
  facet_grid(cols = vars(tipo_delito))



```



Aqui voy a graficar un mapa que visualice los niveles de peligrosidad en CABA segun comuna, omitiendo los delitos relacionados a los siniestros automovilisticos.
```{r}
#Primero procedo a eliminar todos aquellos valores que, en la categoria subtipo_delito, no poseen ninguna observacion (NA)
Delitos_2016_subtipos1<-Delitos_2016[!is.na(Delitos_2016$subtipo_delito),]


#A partir del dataset creado, creo otro nuevo eliminando todas aquellas observaciones en donde el subtipo_delito corresponda a la categoria "Siniestro Vial", dejando solo aquellos relacionados al robo u homocidio
Delitos_2016_no_siniestros<-filter(Delitos_2016_subtipos1, !(subtipo_delito=="Siniestro Vial"))


#Luego agrupo todos los delitos cometidos en funcion de la comuna en donde sucedieron
Delitos_2016_no_siniestros<-Delitos_2016_no_siniestros%>%group_by(comuna)%>%summarise(delitos=n())


#Aqui en un primer momento modifico una columna del dataset comunas_caba, dataset que contiene las medidas geometricas de cada comuna, cambiando el nombre comunas por comuna (comuna=comunas) para de esta manera, a traves de un left_join poder ensamblar el dataset comunas con el dataset delitos_2016_no_siniestros mediante la categoria que tienen en comun, la cual es comuna. De dicho left_join saldra un nuevo dataset, el cual usare para graficar el mapa de nivel de peligrosidad por comuna en CABA
comunas_caba%>%rename(comuna=comunas)->comunas
comunas$comuna<-as.numeric(comunas$comuna)


Delitos_2016_no_siniestros1<-left_join(comunas,Delitos_2016_no_siniestros, by="comuna")




grafico_de_peligrosidad<-ggplot(data = Delitos_2016_no_siniestros1)+
  geom_sf(mapping = aes(fill=delitos))+
  geom_sf(data = rivadavia_avenida, color="red")+
  scale_fill_viridis_b(option = "inferno", direction = -1)+
  theme_void() + 
  labs(title = paste("CABA - Mapa del delito"), 
       subtitle = paste0("Nivel de peligrosidad por comuna - Año 2016") , 
       caption = "Fuente: data.buenosaires.gob.ar", 
       y = "", 
       x = "")+
  theme(axis.ticks = element_blank(), 
        axis.text.y = element_blank(),
        axis.ticks.x = element_blank(),
        axis.text.x = element_blank())


grafico_de_peligrosidad


ggplotly(grafico_de_peligrosidad)



```



Aquí lo que voy a hacer es realizar un grafico de barras interactivo, visualizando la cantidad de delitos cometidos por el tipo de delito y, en funcion del momento del dia en que se realizaron. En este grafico tambien omito las delitos relacionados a los siniestros viales, teniendo en cuenta solo aquellos relacionados al homicidio y al robo
```{r}

#Aquí lo primero que hago es filtrar el dataset Delitos_2016, omitiendo todos aquellos delitos que en la variable subtipo_delito tengan valores nulos (NA)
Delitos_2016[!is.na(Delitos_2016$subtipo_delito),]->subtipo


#Luego aquí lo que hago es, a partir del nuevo dataset subtipo creado, eliminar todas aquellos datos que en la columna subtipo_delito, contengan datos que correspondan al valor "Siniestro Vial"
subtipo1<-subtipo%>%filter(!(subtipo_delito=="Siniestro Vial"))


#Luego aquí agrupo la canidad de delitos por tipo_delito y momento_del_dia
subtipo_agrupado<-subtipo1%>%group_by(tipo_delito, momento_del_dia)%>%summarise(delitos=n())


#Por ultimo realizo el grafico de barras con el paquete hchart
grafico_delito_homicidio<-hchart(subtipo_agrupado, "column", hcaes(x = tipo_delito, y = delitos, group = momento_del_dia)) %>% hc_add_theme(hc_theme_darkunica())%>%hc_title(text="Delitos en CABA")%>%hc_caption(text="Fuente: data.buenosaires.gob.ar")%>%hc_subtitle(text= paste0("Delitos por momentos del dia - Año 2016"))


grafico_delito_homicidio
```



Aquí lo que voy a realizar es un grafico de barras, en donde visulizare la cantidad de siniestros viales en funcion del momento del dia en que se efectuaron
```{r}
#Aqui filtro todos las observaciones de la variable subtipo_delito, dejando solo aquellas que contengan el valor "Siniestro Vial"
subtipo_siniestros<-subtipo%>%filter(subtipo_delito=="Siniestro Vial")

#Luego agrupo todos los siniestros consumados en funcion del momento del dia en que ocurrieron
siniestros_agrupados<-subtipo_siniestros%>%group_by(subtipo_delito, momento_del_dia)%>%summarise(delitos=n())

#Por ultimo grafico dichos datos
grafico_siniestros<-hchart(siniestros_agrupados, "bar", hcaes(x = subtipo_delito, y = delitos, group = momento_del_dia)) %>% hc_add_theme(hc_theme_darkunica())%>%hc_title(text="Siniestros viales CABA")%>%hc_subtitle(text=paste0("Siniestros segun momento del dia - Año 2016"))%>%hc_caption(text="Fuente: data.buenosaires.gob.ar")

grafico_siniestros
```


Aqui lo que hare sera realizar un grafico de lineas que visulize, dentro del mismo, la cantidad de tipos de delitos ocurridos por fecha
```{r}
#Aqui lo que hice fue agrupar los delitos por la fecha y el tipo de delito
Delitos_Agrupados<-Delitos_2016%>%
  group_by(fecha, tipo_delito)%>%summarise(cantidad=n())

#Aqui lo que hice fue hacer de las observaciones de la categoria tipo_delito, hacerlas categoria, es decir, pasarlas de filas a columnas. Esto lo hice para luego, poder separar las columnas en dataset separados
Delitos_Agrupados_ordenados<-
  spread(Delitos_Agrupados, tipo_delito, cantidad)%>%arrange(fecha)

#Luego aqui fue crear un dataset en formato xts para cada tipo de delito
homicidios_xts<-
  xts(Delitos_Agrupados_ordenados$Homicidio, order.by = Delitos_Agrupados_ordenados$fecha)

Hurto_SinViolencia_xts<-
  xts(Delitos_Agrupados_ordenados$`Hurto (sin violencia)`, order.by = Delitos_Agrupados_ordenados$fecha)

Lesiones_xts<-
  xts(Delitos_Agrupados_ordenados$Lesiones, order.by = Delitos_Agrupados_ordenados$fecha)

robo_violencia<-
  xts(Delitos_Agrupados_ordenados$`Robo (con violencia)`, order.by = Delitos_Agrupados_ordenados$fecha)

#Una vez hecho todo lo anterior, volvi a unir todos los dataset en uno solo en formato xts
delitos_xts<-cbind(homicidios_xts, Hurto_SinViolencia_xts, Lesiones_xts, robo_violencia)




#Por ultimo lo que aqui hice fue, realizar un grafico de lineas en donde visulizo la cantidad de tipos de delitos ocurridos por fecha
dygraph(delitos_xts, ylab = "Frecuencia", 
        main = "Frecuencia de delitos ocurridos por fecha en CABA-Año 2016")%>%
  dySeries( label = "Homicidios")%>%
  dySeries( label = "Robos sin violencia")%>%
  dySeries(label = "Lesiones")%>%
  dySeries(label = "Robos con violencia")%>%
  dyOptions(colors = RColorBrewer::brewer.pal(4, "Set2"))%>%
  dyOptions(fillGraph = T, fillAlpha = 0.4)%>%
  dyLegend(width = 400)%>%
  dyRangeSelector()
  
  
  
  #######Delitos para 2017###########


Delitos_2017%>%
  group_by(fecha, tipo_delito)%>%
  summarise(cantidad=n())->delitos_por_dia_2017

delitos_por_dia_2017<-
  spread(delitos_por_dia_2017, tipo_delito, cantidad)%>%arrange(fecha)



homicidios_2017_xts<-
  xts(delitos_por_dia_2017$Homicidio,
      order.by = delitos_por_dia_2017$fecha)

xts(delitos_por_dia_2017$`Hurto (sin violencia)`,
    order.by = delitos_por_dia_2017$fecha)->hurto_SinViolencia_2017_xts


xts(delitos_por_dia_2017$Lesiones,
    order.by = delitos_por_dia_2017$fecha)->lesiones_2017_xts

xts(delitos_por_dia_2017$`Robo (con violencia)`,
    order.by = delitos_por_dia_2017$fecha)->robo_violencia_2017_xts



cbind(homicidios_2017_xts,
      hurto_SinViolencia_2017_xts,
      lesiones_2017_xts,
      robo_violencia_2017_xts)->delitos_por_dia_2017





dygraph(delitos_por_dia_2017, ylab = "Frecuencia delitos", 
        main = "Frecuencia de delitos ocurridos por fecha en CABA-Año 2017")%>%
  dySeries( label = "Homicidios")%>%
  dySeries( label = "Robos sin violencia")%>%
  dySeries(label = "Lesiones")%>%
  dySeries(label = "Robos con violencia")%>%
  dyOptions(colors = RColorBrewer::brewer.pal(4, "Set2"))%>%
  dyOptions(fillGraph = T, fillAlpha = 0.4)%>%
  dyLegend(width = 400)%>%
  dyRangeSelector()
  
  
  
  #########delitos por dia 2018#########

Delitos_2018%>%
  group_by(fecha, tipo_delito)%>%
  summarise(cantidad=n())->delitos_por_dia_2018


delitos_por_dia_2018<-
  spread(delitos_por_dia_2018, tipo_delito, cantidad)%>%arrange(fecha)


xts(delitos_por_dia_2018$Homicidio,
    order.by = delitos_por_dia_2018$fecha)->homicidios_2018_xts

xts(delitos_por_dia_2018$`Hurto (sin violencia)`,
    order.by = delitos_por_dia_2018$fecha)->hurto_SinViolencia_2018_xts

xts(delitos_por_dia_2018$Lesiones,
    order.by = delitos_por_dia_2018$fecha)->lesiones_2018_xts

xts(delitos_por_dia_2018$`Robo (con violencia)`,
    order.by = delitos_por_dia_2018$fecha)->robo_violencia_2018_xts


cbind(homicidios_2018_xts,
      hurto_SinViolencia_2018_xts,
      lesiones_2018_xts,
      robo_violencia_2018_xts)->delitos_por_dia_2018



dygraph(delitos_por_dia_2018, ylab = "Frecuencia delitos", 
        main = "Frecuencia de delitos ocurridos por fecha en CABA-Año 2018")%>%
  dySeries( label = "Homicidios")%>%
  dySeries( label = "Robos sin violencia")%>%
  dySeries(label = "Lesiones")%>%
  dySeries(label = "Robos con violencia")%>%
  dyOptions(colors = RColorBrewer::brewer.pal(4, "Set2"))%>%
  dyOptions(fillGraph = T, fillAlpha = 0.4)%>%
  dyLegend(width = 400)%>%
  dyRangeSelector()
  
  
  ########delitos por dia 2019##########

Delitos_2019%>%
  group_by(fecha, tipo_delito)%>%
  summarise(cantidad=n())->delitos_por_dia_2019


delitos_por_dia_2019<-
  spread(delitos_por_dia_2019,
         tipo_delito,
         cantidad)%>%
  arrange(fecha)

dmy(delitos_por_dia_2019$fecha)->delitos_por_dia_2019$fecha

delitos_por_dia_2019%>%arrange(fecha)->delitos_por_dia_2019

xts(delitos_por_dia_2019$Homicidio,
    order.by = delitos_por_dia_2019$fecha)->homicidios_2019_xts

xts(delitos_por_dia_2019$`Hurto (sin violencia)`,
    order.by = delitos_por_dia_2019$fecha)->hurto_SinViolencia_2019_xts

xts(delitos_por_dia_2019$Lesiones,
    order.by = delitos_por_dia_2019$fecha)->lesiones_2019_xts

xts(delitos_por_dia_2019$`Robo (con violencia)`,
    order.by = delitos_por_dia_2019$fecha)->robo_violencia_2019_xts


cbind(homicidios_2019_xts,
      hurto_SinViolencia_2019_xts,
      lesiones_2019_xts,
      robo_violencia_2019_xts)->delitos_por_dia_2019


dygraph(delitos_por_dia_2019, ylab = "Frecuencia delitos", 
        main = "Frecuencia de delitos ocurridos por fecha en CABA-Año 2019")%>%
  dySeries( label = "Homicidios")%>%
  dySeries( label = "Robos sin violencia")%>%
  dySeries(label = "Lesiones")%>%
  dySeries(label = "Robos con violencia")%>%
  dyOptions(colors = RColorBrewer::brewer.pal(4, "Set2"))%>%
  dyOptions(fillGraph = T, fillAlpha = 0.4)%>%
  dyLegend(width = 400)%>%
  dyRangeSelector()
  
  
  
  Delitos_2020%>%
  group_by(fecha, tipo)%>%
  summarise(cantidad=n())->delitos_por_dia_2020



spread(delitos_por_dia_2020, tipo, cantidad)%>%
  arrange(fecha)->delitos_por_dia_2020


xts(delitos_por_dia_2020$Homicidio,
    order.by = delitos_por_dia_2020$fecha)->homicidios_2020_xts


xts(delitos_por_dia_2020$`Hurto (sin violencia)`,
    order.by = delitos_por_dia_2020$fecha)->hurto_SinViolencia_2020_xts


xts(delitos_por_dia_2020$Lesiones,
    order.by = delitos_por_dia_2020$fecha)->lesiones_2020_xts


xts(delitos_por_dia_2020$`Robo (con violencia)`,
    order.by = delitos_por_dia_2020$fecha)->robo_violencia_2020_xts


delitos_2020_xts<-cbind(homicidios_2020_xts,
                        hurto_SinViolencia_2020_xts,
                        lesiones_2020_xts,
                        robo_violencia_2020_xts)
  
  
  
  
  dygraph(delitos_2020_xts, ylab = "Frecuencia delitos", 
        main = "Frecuencia de delitos ocurridos por fecha en CABA-Año 2020")%>%
  dySeries( label = "Homicidios")%>%
  dySeries( label = "Robos sin violencia")%>%
  dySeries(label = "Lesiones")%>%
  dySeries(label = "Robos con violencia")%>%
  dyOptions(colors = RColorBrewer::brewer.pal(4, "Set2"))%>%
  dyOptions(fillGraph = T, fillAlpha = 0.4)%>%
  dyLegend(width = 400)%>%
  dyRangeSelector()%>%
  dyEvent("2020-03-20", "Inicio ASPO", labelLoc = "top")
  
  
 
  



```
#############Mapa con leaflet###############
#Este grafico esta bien
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addTiles()%>%
  addMarkers(clusterOptions = markerClusterOptions())


#Esta es la funcion que tuve que realizar para asignarle a cada tipo
#de delito un color, y luego graficar en puntos el lugar exacto en 
#donde ocurrieron. Cada color representa un tipo de delito especifico
pal <- colorFactor(c("navy", "red", "yellow", "green"), domain = c("Robo (con violencia)", "Lesiones", "Hurto (sin violencia)", "Homicidio"))

Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addProviderTiles(providers$CartoDB.DarkMatter)%>%
  addCircleMarkers(~long, ~lat ,popup = Delitos_2016$tipo_delito, weight = 3,
                   radius = 4, color = ~pal(tipo_delito), stroke = F,
                   fillOpacity = 0.8)


#Este grafico no esta bien, pero lo dejo porque esta aqui la funcion
#addPolygons, la cual una vez que una al dataset los datos geometricos
#podre graficar tambien con leaflet las medidas geometricas de CABA
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addProviderTiles(providers$CartoDB.DarkMatter)%>%
  addMarkers(clusterOptions = markerClusterOptions())%>%
  addPolygons(fill = FALSE, stroke = TRUE, color = "#03F")



##################PROBANDO###############

#Este color del mapa esta piola
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addProviderTiles(providers$Esri.WorldStreetMap)%>%
  addMarkers(clusterOptions = markerClusterOptions())

#Instalando paquetes
install.packages("leaflet.extras")
install.packages("rworldxtra")
install.packages("raster")

#Abriendo librerias
library(leaflet.extras)
library(rworldxtra)
library(raster)
library(sp)


#Probando primer grafico: visualizacion de delitos por puntos, sin 
#distinguir por tipo de delito
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addTiles()%>%
  addCircles(lat = ~lat, lng = ~long)

#En este grafico lo unico que hacemos en remplazar los puntos por
#popus, es decir, otro tipo de simbolo de representacion de los delitos
#tambien podria usar addMarkers en vez de addAwesomeMarkers, que
#es exactamente igual. Con addCircleMarkers tambien graficamos con
#puntos, solo que los circulos son mas grandes y mas transparentes.
#Esta ultima funcion no es recomendable cuando hay muchas observaciones
#ya que se superponen demasiado por su tamaño
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addTiles()%>%
  addAwesomeMarkers(lat = ~lat, lng = ~long)




####Comenzamos a asignarle un color a cada tipo de delitoo

#Comenzamos por por crear un vector con el numero de los delitos
Numero_delitos_2016 <-Delitos_2016$tipo_delito%>%unique()%>%length()


#Luego creamos otro vector con el nombre de los tipos de delitos
Nombres_delitos_2016 <-Delitos_2016$tipo_delito%>%unique()

#Creamos un vector con los colores para los tipos de delito
colores<- c('#1b9e77','#d95f02','#7570b3','#e7298a')

#Ahora creamos la paleta de colores, asignando un color a cada tipo
#de delito
paleta <- colorFactor(colores, domain = Nombres_delitos_2016)

#Aqui realizo el grafico en donde a cada tipo de delito se le
#asigna un color en funcion de la paleta creada
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addTiles()%>%
  addCircles(lat = ~lat, lng = ~long, 
             color = ~paleta(tipo_delito),
             fillOpacity = 0.5)


#EN este grafico, con la funcion label, lo que hacemos es que, al 
#tocar cada punto podemos saber que tipo de delito ocurrio allí
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addTiles()%>%
  addCircles(lat = ~lat, lng = ~long, 
             color = ~paleta(tipo_delito),
             fillOpacity = 0.5,
             label = ~tipo_delito)


#Aqui con la funcion popup lo que podemos hacer es que, al apretar
#cada punto, el cual al solo posar el cursor nos indica el tipo de
#delito que allí ocurrio, tambien nos indique el momento del dia
#en que dicho delito ocurrio
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addTiles()%>%
  addCircles(lat = ~lat, lng = ~long, 
             color = ~paleta(tipo_delito),
             fillOpacity = 0.5,
             label = ~tipo_delito,
             popup = ~momento_del_dia)

##Luego aqui hacemos lo mismo pero le agregamos la funcion group
#la cual nos va a servir de metodo de control para mas adelante.
#Luego tambien guardamos el mapa en un objeto
Mapa_2016_prueba <-Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addTiles()%>%
  addCircles(lat = ~lat, lng = ~long, 
             color = ~paleta(tipo_delito),
             fillOpacity = 0.5,
             label = ~tipo_delito,
             popup = ~momento_del_dia,
             group = "Delitos")

#Una vez hecho objeto el mapa, con la funcion addlegend, lo que 
#hice fue crear una leyenda, en donde me indidque que color 
#corresponde a que tipo de delito
Mapa_2016_prueba%>%leaflet::addLegend(data=Delitos_2016, "bottomright",
                             pal=paleta,
                             values= ~tipo_delito,
                             title = "Tipo de Delitos",
                             opacity=0.5,
                             group="Leyenda")


#Aqui hice otro mapa de prueba pero cambiando el color del mapa por uno
#oscuro. Este color de mapa es mas util al momento de visualizar 
#los puntos, ya que contrasta mejor con los colores, y por tanto
#se vuelven mas identificables a primera vista
Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addProviderTiles(providers$CartoDB.DarkMatter)%>%
  addCircles(lat = ~lat, lng = ~long, 
             color = ~paleta(tipo_delito),
             fillOpacity = 0.5,
             label = ~tipo_delito,
             popup = ~momento_del_dia,
             group = "Delitos")%>%
  leaflet::addLegend(data=Delitos_2016, "bottomright",
                     pal=paleta,
                     values= ~tipo_delito,
                     title = "Tipo de Delitos",
                     opacity=0.5,
                     group="Leyenda")

###Es exactamente el mismo mapa que arriba pero convertido en objeto
Mapa_2016_prueba_2<-Delitos_2016%>%
  filter(fecha >="2016-01-01" & fecha <="2016-01-02")%>%
  leaflet()%>%
  addProviderTiles(providers$CartoDB.DarkMatter)%>%
  addCircles(lat = ~lat, lng = ~long, 
             color = ~paleta(tipo_delito),
             fillOpacity = 0.5,
             label = ~tipo_delito,
             popup = ~momento_del_dia,
             group = "Delitos")%>%
  leaflet::addLegend(data=Delitos_2016, "bottomright",
                     pal=paleta,
                     values= ~tipo_delito,
                     title = "Tipo de Delitos",
                     opacity=0.5,
                     group="Leyenda")


Mapa_2016_prueba_2

####Aqui lo que hice fue graficar todos los delitos ocurridos en
#en el año 2016. No le cambie la leyenda, ni ninguna otra cosa, 
#solamente filtre todas aquellas observaciones dejando solo las 
#que corresponden  a los homicidios
Delitos_2016%>%
  filter(tipo_delito=="Homicidio")%>%
  leaflet()%>%
  addProviderTiles(providers$CartoDB.DarkMatter)%>%
  addCircles(lat = ~lat, lng = ~long, 
             color = ~paleta(tipo_delito),
             fillOpacity = 0.5,
             label = ~tipo_delito,
             popup = ~momento_del_dia)%>%
  leaflet::addLegend(data=Delitos_2016, "bottomright",
                     pal=paleta,
                     values= ~tipo_delito,
                     title = "Tipo de Delitos",
                     opacity=0.5,
                     group="Delitos")


###Aqui lo que hice fue, una vez creado en objeto el mapa-2, con la 
#funcion addLayersControl, crear una opcion que me permita eliminar,
# mediante un pequeñot tablero,los puntos que referencian los 
#delitos o la leyenda en el mapa.
Mapa_2016_prueba_2%>%
  addLayersControl(overlayGroups = c("Delitos", "Leyenda"),
                   options = layersControlOptions(collapsed = T))




Nombres_delitos_2016

###


Nombres_pres <- list()
for (i in 1:length(Nombres_delitos_2016)) {
  Nombres_pres[[i]]<-Delitos_2016%>%dplyr::filter(tipo_delito == Nombres_delitos_2016[i], fecha >="2016-01-01" & fecha <="2016-01-02")
  }
names(Nombres_pres) <- Nombres_delitos_2016 



###

Mapa_2016_prueba_3<-leaflet()%>%addTiles()
for (i in 1:length(Nombres_pres)) {
  Mapa_2016_prueba_3 <- Mapa_2016_prueba_3 %>% 
    addProviderTiles(providers$CartoDB.DarkMatter)%>%
    addCircles(data = Nombres_pres[[i]],
    lat = ~lat, lng = ~long, 
    color = ~paleta(tipo_delito),
    fillOpacity = 0.5,
    label = ~tipo_delito,
    popup = ~momento_del_dia,
    group = Nombres_delitos_2016[i])
}




Mapa_2016_prueba_3<-Mapa_2016_prueba_3 %>%
  leaflet::addLegend(data = Delitos_2016, "bottomright",
                     pal = paleta, values = ~tipo_delito,
                     title = "Delitos", opacity = 1,
                     group = "Leyenda")






Grupos <- c("Leyenda", Nombres_delitos_2016)
Mapa_2016_prueba_3 <- Mapa_2016_prueba_3 %>% addLayersControl(overlayGroups = Grupos,
                                                              options = layersControlOptions(collapsed = T))




Mapa_2016_prueba_3


#####mapa 2017##############

Nombres_delitos_2017 <-Delitos_2017$tipo_delito%>%unique()

#Creamos un vector con los colores para los tipos de delito
colores<- c('#1b9e77','#d95f02','#7570b3','#e7298a')

#Ahora creamos la paleta de colores, asignando un color a cada tipo
#de delito
paleta_2017 <- colorFactor(colores, domain = Nombres_delitos_2017)


Nombres_pres <- list()
for (i in 1:length(Nombres_delitos_2017)) {
  Nombres_pres[[i]]<-Delitos_2017%>%dplyr::filter(tipo_delito == Nombres_delitos_2017[i])
}
names(Nombres_pres) <- Nombres_delitos_2017 



###

Mapa_2017<-leaflet()%>%addTiles()
for (i in 1:length(Nombres_pres)) {
  Mapa_2017 <- Mapa_2017 %>% 
    addProviderTiles(providers$CartoDB.DarkMatter)%>%
    addCircles(data = Nombres_pres[[i]],
               lat = ~lat, lng = ~long, 
               color = ~paleta_2017(tipo_delito),
               fillOpacity = 0.5,
               label = ~subtipo_delito,
               popup = ~tipo_delito,
               group = Nombres_delitos_2017[i])
}




Mapa_2017<-Mapa_2017 %>%
  leaflet::addLegend(data = Delitos_2017, "bottomright",
                     pal = paleta, values = ~tipo_delito,
                     title = "Delitos", opacity = 1,
                     group = "Leyenda")






Grupos <- c("Leyenda", Nombres_delitos_2017)
Mapa_2017 <- Mapa_2017 %>% addLayersControl(overlayGroups = Grupos,
                                                              options = layersControlOptions(collapsed = T))




Mapa_2017



#########Mapa 2018###########


Delitos_2018<-Delitos_2018%>%mutate(franja_horaria=case_when(franja_horaria==1~1, franja_horaria==2~2, franja_horaria==3~3, franja_horaria==4~4, franja_horaria==5~5, franja_horaria==6~6, franja_horaria==7~7, franja_horaria==8~8, franja_horaria==9~9, franja_horaria==10~10, franja_horaria==11~11, franja_horaria==12~12, franja_horaria==13~13, franja_horaria==14~14, franja_horaria==15~15, franja_horaria==16~16, franja_horaria==17~17, franja_horaria==18~18, franja_horaria==19~19, franja_horaria==20~20, franja_horaria==21~21, franja_horaria==22~22, franja_horaria==23~23, franja_horaria==0~24))



#Luego de hacer lo especificado arriba, aquí lo que hago es agrupar por intervalos para luego, a dicho intervalo, asígnarle una categoria correspondiente al momento del dia al que corresponden dichos intervalos
Delitos_2018<-Delitos_2018%>%mutate(momento_del_dia=case_when(franja_horaria>=7 & franja_horaria <=12 ~"Mañana", franja_horaria>=13 & franja_horaria <=19 ~"Tarde", franja_horaria >= 20 & franja_horaria <=24 ~"Noche", franja_horaria >=1 & franja_horaria <=6 ~"Madrugada"))



Numero_delitos_2018 <-Delitos_2018$tipo_delito%>%unique()%>%length()


#Luego creamos otro vector con el nombre de los tipos de delitos
Nombres_delitos_2018 <-Delitos_2018$tipo_delito%>%unique()

#Creamos un vector con los colores para los tipos de delito
colores<- c('#1b9e77','#d95f02','#7570b3','#e7298a')

#Ahora creamos la paleta de colores, asignando un color a cada tipo
#de delito
paleta_2018 <- colorFactor(colores, domain = Nombres_delitos_2018)


Nombres_pres <- list()
for (i in 1:length(Nombres_delitos_2018)) {
  Nombres_pres[[i]]<-Delitos_2018%>%dplyr::filter(tipo_delito == Nombres_delitos_2018[i])
}
names(Nombres_pres) <- Nombres_delitos_2018 



###

Mapa_2018<-leaflet()%>%addTiles()
for (i in 1:length(Nombres_pres)) {
  Mapa_2018 <- Mapa_2018 %>% 
    addProviderTiles(providers$CartoDB.DarkMatter)%>%
    addCircles(data = Nombres_pres[[i]],
               lat = ~lat, lng = ~long, 
               color = ~paleta_2018(tipo_delito),
               fillOpacity = 0.5,
               label = ~subtipo_delito,
               popup = ~momento_del_dia,
               group = Nombres_delitos_2018[i])
}




Mapa_2018<-Mapa_2018 %>%
  leaflet::addLegend(data = Delitos_2018, "bottomright",
                     pal = paleta, values = ~tipo_delito,
                     title = "Delitos", opacity = 1,
                     group = "Leyenda")






Grupos <- c("Leyenda", Nombres_delitos_2018)
Mapa_2018 <- Mapa_2018 %>% addLayersControl(overlayGroups = Grupos,
                                            options = layersControlOptions(collapsed = T))




Mapa_2018








####Probando grafico de lineas###
#########Probando con datos de 2016-2017-2018######
Delitos_2016%>%
  mutate(anio_mes=substr(fecha, 1, 7))%>%
  group_by(anio_mes, tipo_delito)%>%
  summarise(cantidad=n())->delitos_por_mes_2016


Delitos_2017%>%
  mutate(anio_mes=substr(fecha, 1, 7))%>%
  group_by(anio_mes, tipo_delito)%>%
  summarise(cantidad=n())->delitos_por_mes_2017


Delitos_2018%>%
  mutate(anio_mes=substr(fecha, 1, 7))%>%
  group_by(anio_mes, tipo_delito)%>%
  summarise(cantidad=n())->delitos_por_mes_2018


merge(x=delitos_por_mes_2016,
      y=delitos_por_mes_2017,
      all=T)->delitos_por_mes_completa

merge(x=delitos_por_mes_completa,
      y=delitos_por_mes_2018,
      all=T)->delitos_por_mes_completa


format(delitos_por_mes_completa$anio_mes,
       format="%Y:%m")->delitos_por_mes_completa$anio_mes


hchart(delitos_por_mes_completa,
       "line",
       hcaes(x=anio_mes, y=cantidad, group=tipo_delito))%>%
  hc_add_theme(hc_theme_darkunica())%>%
  hc_title(text="Variabilidad de la estructura del delito")%>%
  hc_subtitle(text="Año 2016-2018/CABA")%>%
  hc_caption(text="Fuente: data.buenosaires.gob.ar")%>%
  hc_yAxis(title=list(text="Frecuencia de delitos",
                      aling="high",
                      margin=10))%>%
  hc_xAxis(title=list(text="Linea temporal"))%>%
  hc_navigator(enabled=T)



####Probando grafico de poleas####
install.packages("sankeywheel")
library(sankeywheel)
install.packages("manipulateWidget")
library(manipulateWidget)

Delitos_2016%>%
  group_by(tipo_delito,
           momento_del_dia)%>%
  summarise(cantidad=n())->delitos_momentodeldia_2016

view(delitos_momentodeldia_2016)


sankeywheel(from = delitos_momentodeldia_2016$tipo_delito,
            to = delitos_momentodeldia_2016$momento_del_dia,
            weight = delitos_momentodeldia_2016$cantidad)



sankeywheel(from = delitos_momentodeldia_2016$tipo_delito,
            to = delitos_momentodeldia_2016$momento_del_dia,
            weight = delitos_momentodeldia_2016$cantidad,
            type = "sankey",
            theme = "sunset",
            title = "Delitos por momento del dia")


######Analisis de delitos por dias#######
weekdays(Delitos_2016$fecha)->
  Delitos_2016$Dias

Delitos_2016%>%
  group_by(Dias,
           tipo_delito)%>%
  summarise(cantidad=n())%>%
  arrange(Dias)->Dias_delitos




ggplot(data = Dias_delitos)+
  geom_col(mapping = aes(x = Dias,
                         y =cantidad,
                         fill=tipo_delito))+
  coord_flip()+
  geom_text(position = "stack",
            aes(x=Dias,
                y=cantidad,
                label=cantidad))


Dias_delitos%>%hchart("bar",
                      hcaes(x=Dias,
                            y=cantidad,
                            group=tipo_delito),
                      stacking="normal")


Dias_delitos%>%hchart("bar",
                      hcaes(x=Dias,
                            y=cantidad,
                            group=tipo_delito),
                      stacking="percent")



##########Subtipos de delitos por dia#########
weekdays(Delitos_2016_subtipos1$fecha)->
  Delitos_2016_subtipos1$dias

Delitos_2016%>%
  group_by(Dias,
           subtipo_delito)%>%
  summarise(cantidad=n())->Delitos_2016_subtipos1


Delitos_2016_subtipos1[!is.na(Delitos_2016_subtipos1$subtipo_delito),]->Delitos_2016_subtipos1


Delitos_2016_subtipos1%>%
  hchart("bar",
         hcaes(x=Dias,
               y=cantidad,
               group=subtipo_delito),
         stacking="percent")



Delitos_2016_subtipos1%>%
  hchart("bar",
         hcaes(x=Dias,
               y=cantidad,
               group=subtipo_delito),
         stacking="normal")


####Probando sacar tasa de delitos por cada 100.000 habitantes#########
read_xlsx("Poblacion CABA/Poblacion 2016 proyeccion.xlsx")->Poblacion_2016

Poblacion_2016%>%
  rename(comuna=Comuna)->Poblacion_2016

#Con esta funcion puedo contabilizar la cantida de observaciones para cada valor
#incluyendo los valores perdidos
data.frame(table(Delitos_2016$comuna, useNA = "always"))

Poblacion_2016%>%
  left_join(Delitos_2016, by="comuna")->Delitos_2016



Delitos_2016%>%
  group_by(comuna, Poblacion)%>%
  summarise(cantidad=n())->Delitos_por_poblacion2016


mutate(Delitos_por_poblacion2016, tasa=(cantidad/Poblacion)*100.000)











